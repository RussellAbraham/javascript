{"version":3,"sources":["localforage.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","localforage","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","nextTick","draining","oldQueue","len","queue","immediate","task","push","scheduleDrain","Mutation","MutationObserver","WebKitMutationObserver","called","observer","element","document","createTextNode","observe","characterData","data","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","2","INTERNAL","Promise","resolver","TypeError","state","PENDING","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","value","returnValue","handlers","reject","resolve","getThen","obj","then","apply","arguments","thenable","onError","onSuccess","tryToUnwrap","result","tryCatch","status","out","reason","all","iterable","Object","prototype","toString","values","Array","resolved","resolveFromAll","outValue","error","race","response","REJECTED","FULFILLED","constructor","3","4","_classCallCheck","instance","Constructor","createBlob","parts","properties","Blob","name","Builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","builder","append","getBlob","type","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","key","console","warn","String","getCallback","_binStringToArrayBuffer","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_checkBlobSupportWithoutCaching","idb","Promise$1","txn","transaction","DETECT_BLOB_SUPPORT_STORE","READ_WRITE","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","navigator","userAgent","match","matchedEdge","parseInt","_checkBlobSupport","supportsBlobs","_deferReadiness","dbInfo","dbContext","dbContexts","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_rejectReadiness","err","_getConnection","upgradeNeeded","createDbContext","db","close","dbArgs","version","openreq","open","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","newVersion","onerror","onsuccess","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_encodeBlob","reader","FileReader","onloadend","base64","btoa","target","__local_forage_encoded_blob","readAsBinaryString","_decodeBlob","encodedBlob","atob","_isEncodedBlob","_fullyReady","_initReady","_dbInfo","_tryReconnect","forages","forage","createTransaction","mode","retries","undefined","tx","_initStorage","options","ignoreErrors","ready","initPromises","j","slice","_defaultConfig","k","getItem","READ_ONLY","store","req","get","iterate","iterator","openCursor","iterationNumber","cursor","setItem","blobSupport","removeItem","clear","count","advanced","advance","keys","dropInstance","currentConfig","config","isCurrentDb","dbPromise","deleteObjectStore","_forage2","deleteDatabase","onblocked","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","BASE_CHARS","indexOf","bufferToString","base64String","substring","serialize","valueType","toString$1","marker","SERIALIZED_MARKER","TYPE_ARRAYBUFFER","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_UINT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","fileReader","onload","str","BLOB_TYPE_PREFIX","TYPE_BLOB","readAsArrayBuffer","JSON","stringify","deserialize","SERIALIZED_MARKER_LENGTH","parse","blobType","TYPE_SERIALIZED_MARKER_LENGTH","BLOB_TYPE_PREFIX_REGEX","test","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","createDbTable","executeSql","_initStorage$1","dbInfoPromise","openDatabase","description","size","serializer","localforageSerializer","tryExecuteSql","sqlStatement","args","SYNTAX_ERR","results","rows","getItem$1","item","iterate$1","_setItem","retriesLeft","originalValue","sqlError","QUOTA_ERR","setItem$1","removeItem$1","clear$1","length$1","c","key$1","keys$1","getAllStoreNames","storeNames","dropInstance$1","operationInfo","operations","_getKeyPrefix","defaultConfig","keyPrefix","checkIfLocalStorageThrows","localStorage","_isLocalStorageUsable","_initStorage$2","clear$2","getItem$2","iterate$2","keyPrefixLength","key$2","keys$2","itemKey","length$2","removeItem$2","setItem$2","dropInstance$2","callWhenReady","localForageInstance","libraryMethod","_args","extend","arg","_key","hasOwnProperty","isArray","_typeof","Symbol","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","asyncStorage","_driver","_support","isSafari","platform","hasFetch","fetch","IDBKeyRange","webSQLStorage","localStorageWrapper","sameValue","x","y","isNaN","includes","array","searchElement","DefinedDrivers","DriverSupport","DefaultDrivers","INDEXEDDB","WEBSQL","LOCALSTORAGE","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","concat","DefaultConfig","driver","LocalForage","driverTypeKey","driverName","defineDriver","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","replace","driverObject","complianceError","driverMethods","driverMethodName","_i","_len","optionalDriverMethod","methodName","setDriverSupport","support","info","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","setDriverToConfig","extendSelfWithDriver","_extend","initDriver","supportedDrivers","driverPromiseLoop","currentDriverIndex","_getSupportedDrivers","oldDriverSetDone","supports","libraryMethodsAndProperties","createInstance","localforage_js"],"mappings":"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","file":"localforage.min.js","sourcesContent":["/*!\n    localForage -- Offline Storage, Improved\n    Version 1.7.3\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support (#5572)\n        // since Safari 10.1 shipped with fetch, we can use that to detect it\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            resolve(openreq.result);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback retuns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = req.onblocked = function (err) {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(err);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n"]}