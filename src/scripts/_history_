(function (global) {
    function _(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
    }

    global._ = _;

    var ObjProto = Object.prototype;
    var hasOwn = ObjProto.hasOwnProperty;

    _.has = function (obj, key) {
        return obj != null && hasOwn.call(obj, key);
    };

    _.identity = function (object) {
        return object;
    };

    _.memoize = function (callback, address) {
        const cache = {};
        var key;
        address || (address = _.identity);
        return function () {
            key = address.apply(this, arguments);
            return _.has(cache, key) ?
                cache[key] :
                (cache[key] = callback.apply(this, arguments));
        };
    };

    _.prototype.valueOf = function () {
        return this;
    };

    function Node(value) {
        this.value = value;
        this.next = null;
    }

    Node.prototype = Object.create(_.prototype, {
        constructor: {
            configurable: true,
            enumerable: true,
            value: Node,
            writeable: true
        }
    });

    function Sync(name) {
        this.name = name;
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    Sync.prototype = Object.create(_.prototype, {
        constructor: {
            configurable: true,
            enumerable: true,
            value: Sync,
            writeable: true
        }
    });

    Sync.prototype.testPending = function (str) {
        return new Promise(function (resolve, reject) {
            if (str) {
                resolve(str);
            } else {
                reject("not enough arguments");
            }
        });
    };

    Sync.prototype.push = function (val) {
        var self = this;
        var newNode = new Node(val);
        if (!self.head) {
            self.head = newNode;
            self.tail = self.head;
        } else {
            self.tail.next = newNode;
            self.tail = newNode;
        }
        self.length++;
        return self;
    };

    Sync.prototype.pop = function () {
        var self = this;
        if (!self.head) return undefined;
        var current = self.head;
        var newTail = current;
        while (current.next) {
            newTail = current;
            current = current.next;
        }
        self.tail = newTail;
        self.tail.next = null;
        self.length--;
        if (self.length === 0) {
            self.head = null;
            self.tail = null;
        }
        return current;
    };

    Sync.prototype.get = function (index) {
        var self = this;
        if (index < 0 || index >= self.length) return null;
        var counter = 0;
        var current = self.head;
        while (counter !== index) {
            current = current.next;
            counter++;
        }
        return current;
    };

    Sync.prototype.reverse = function () {
        var self = this;
        var node = self.head;
        self.head = self.tail;
        self.tail = node;
        var next;
        var prev = null;
        var i,
            length = self.length;
        for (i = 0; i < length; i++) {
            next = node.next;
            node.next = prev;
            prev = node;
            node = next;
        }
        return self;
    };

    Sync.prototype.print = function () {
        var self = this;
        var arr = [];
        var current = self.head;
        while (current) {
            arr.push(current.value);
            current = current.next;
        }
        console.log(arr);
    };

    Sync.prototype.toJSON = function () {
        var self = this;
        var arr = [];
        var current = self.head;
        while (current) {
            arr.push(current.value);
            current = current.next;
        }
        return JSON.stringify(arr, null, 2);
    };

    function Model(sync) {
        this.sync = sync;
    }

    Model.prototype = Object.create(_.prototype, {
        constructor: {
            configurable: true,
            enumerable: true,
            value: Model,
            writeable: true
        }
    });

    Model.prototype.test = function (str) {
        var self = this;
        this.sync
            .testPending(str)
            .then(function (res) {
                self.sync.push(str);
            })
            .catch(function (er) {});
    };

    function Template() {
        this.templateSettings = {
            splitter: /\s+/gi
        };
    }

    Template.prototype = Object.create(_.prototype, {
        constructor: {
            configurable: true,
            enumerable: true,
            value: Template,
            writeable: true
        }
    });

    Template.prototype.testPending = function (str) {
        return new Promise(function (resolve, reject) {
            if (str) {
                resolve(str);
            } else {
                reject("not enough arguments");
            }
        });
    };

    function View(template) {
        this.template = template;
        this.$header = document.querySelector("header");
    }

    View.prototype = Object.create(_.prototype, {
        constructor: {
            configurable: true,
            enumerable: true,
            value: View,
            writeable: true
        }
    });

    View.prototype.test = function (str) {
        this.template
            .testPending(str)
            .then(function (res) {
                console.log("View>\n<pre>" + res + "</pre>\n");
            })
            .catch(function (er) {
                console.error(er);
            });
    };

    function Controller(model, view) {
        var self = this;
        self.model = model;
        self.view = view;
    }

    Controller.prototype = Object.create(_.prototype, {
        constructor: {
            configurable: true,
            enumerable: true,
            value: Controller,
            writeable: true
        }
    });

    Controller.prototype.test = function (str) {
        var self = this;
        var memo = _.memoize(function () {
            return {
                model: self.model.test(str),
                view: self.view.test(str)
            };
        });
        return memo();
    };

    function Main(name) {

        this.sync = new Sync(name);
        this.model = new Model(this.sync);
        this.template = new Template();
        this.view = new View(this.template);
        this.controller = new Controller(this.model, this.view);
        this.initialize.apply(this, arguments);
    }

    Main.prototype = Object.create(_.prototype, {
        constructor: {
            configurable: true,
            enumerable: true,
            value: Main,
            writeable: true
        }
    });

    Main.prototype.test = function (str) {
        this.controller.test(str);
    };

    Main.prototype.initialize = function () {};

    var olog = console.log;
    var article = document.querySelector("article pre");
    var fragment = document.createDocumentFragment();

    document.log = function (string) {
        olog.apply(console, arguments);
        var section = document.createElement("section");
        section.innerHTML = string;
        fragment.appendChild(section);
        article.insertBefore(fragment, article.childNodes[0]);
    };

    document.worker = new Worker(
        URL.createObjectURL(
            new Blob([document.getElementById("worker").textContent], {
                type: "text/javascript"
            })
        )
    );

    document.worker.onmessage = function (event) {
        document.log(event.data);
    };

    document.post = function (str) {
        document.worker.postMessage(str);
    };

    console.log = document.log;

    window.test = new Main("mvc");

    test.test("Hello World!");
    test.test(new Date().toString());
    test.test(
        '<input type="search" id="search" name="search" class="form-control form-control-sm" placeholder="Search">'
    );
})(this);