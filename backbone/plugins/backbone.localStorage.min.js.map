{"version":3,"sources":["backbone.localStorage.js"],"names":["root","factory","define","amd","_","Backbone","this","S4","Math","random","toString","substring","guid","LocalStorage","window","Store","name","store","localStorage","getItem","records","split","extend","prototype","save","setItem","join","create","model","id","set","idAttribute","JSON","stringify","push","find","update","include","jsonData","findAll","chain","map","compact","value","destroy","isNew","removeItem","reject","data","parse","sync","localSync","method","options","resp","errorMessage","collection","syncDfd","$","Deferred","undefined","error","code","DOMException","QUOTA_EXCEEDED_ERR","length","message","trigger","success","resolve","complete","promise","ajaxSync","getSyncMethod","apply"],"mappings":"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","file":"backbone.localStorage.min.js","sourcesContent":["/**\n * Backbone localStorage Adapter\n * Version 1.1.0\n *\n * https://github.com/jeromegn/Backbone.localStorage\n */\n(function (root, factory) {\n   if (typeof define === \"function\" && define.amd) {\n      // AMD. Register as an anonymous module.\n      define([\"underscore\",\"backbone\"], function(_, Backbone) {\n        // Use global variables if the locals are undefined.\n        return factory(_ || root._, Backbone || root.Backbone);\n      });\n   } else {\n      // RequireJS isn't being used. Assume underscore and backbone are loaded in script tags\n      factory(_, Backbone);\n   }\n}(this, function(_, Backbone) {\n// A simple module to replace `Backbone.sync` with *localStorage*-based\n// persistence. Models are given GUIDS, and saved into a JSON object. Simple\n// as that.\n\n// Hold reference to Underscore.js and Backbone.js in the closure in order\n// to make things work even if they are removed from the global namespace\n\n// Generate four random hex digits.\nfunction S4() {\n   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n};\n\n// Generate a pseudo-GUID by concatenating random hexadecimal.\nfunction guid() {\n   return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n};\n\n// Our Store is represented by a single JS object in *localStorage*. Create it\n// with a meaningful name, like the name you'd give a table.\n// window.Store is deprecated, use Backbone.LocalStorage instead\nBackbone.LocalStorage = window.Store = function(name) {\n  this.name = name;\n  var store = this.localStorage().getItem(this.name);\n  this.records = (store && store.split(\",\")) || [];\n};\n\n_.extend(Backbone.LocalStorage.prototype, {\n\n  // Save the current state of the **Store** to *localStorage*.\n  save: function() {\n    this.localStorage().setItem(this.name, this.records.join(\",\"));\n  },\n\n  // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already\n  // have an id of it's own.\n  create: function(model) {\n    if (!model.id) {\n      model.id = guid();\n      model.set(model.idAttribute, model.id);\n    }\n    this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\n    this.records.push(model.id.toString());\n    this.save();\n    return this.find(model);\n  },\n\n  // Update a model by replacing its copy in `this.data`.\n  update: function(model) {\n    this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\n    if (!_.include(this.records, model.id.toString()))\n      this.records.push(model.id.toString()); this.save();\n    return this.find(model);\n  },\n\n  // Retrieve a model from `this.data` by id.\n  find: function(model) {\n    return this.jsonData(this.localStorage().getItem(this.name+\"-\"+model.id));\n  },\n\n  // Return the array of all models currently in storage.\n  findAll: function() {\n    return _(this.records).chain()\n      .map(function(id){\n        return this.jsonData(this.localStorage().getItem(this.name+\"-\"+id));\n      }, this)\n      .compact()\n      .value();\n  },\n\n  // Delete a model from `this.data`, returning it.\n  destroy: function(model) {\n    if (model.isNew())\n      return false\n    this.localStorage().removeItem(this.name+\"-\"+model.id);\n    this.records = _.reject(this.records, function(id){\n      return id === model.id.toString();\n    });\n    this.save();\n    return model;\n  },\n\n  localStorage: function() {\n    return localStorage;\n  },\n\n  // fix for \"illegal access\" error on Android when JSON.parse is passed null\n  jsonData: function (data) {\n      return data && JSON.parse(data);\n  }\n\n});\n\n// localSync delegate to the model or collection's\n// *localStorage* property, which should be an instance of `Store`.\n// window.Store.sync and Backbone.localSync is deprectated, use Backbone.LocalStorage.sync instead\nBackbone.LocalStorage.sync = window.Store.sync = Backbone.localSync = function(method, model, options) {\n  var store = model.localStorage || model.collection.localStorage;\n\n  var resp, errorMessage, syncDfd = $.Deferred && $.Deferred(); //If $ is having Deferred - use it.\n\n  try {\n\n    switch (method) {\n      case \"read\":\n        resp = model.id != undefined ? store.find(model) : store.findAll();\n        break;\n      case \"create\":\n        resp = store.create(model);\n        break;\n      case \"update\":\n        resp = store.update(model);\n        break;\n      case \"delete\":\n        resp = store.destroy(model);\n        break;\n    }\n\n  } catch(error) {\n    if (error.code === DOMException.QUOTA_EXCEEDED_ERR && window.localStorage.length === 0)\n      errorMessage = \"Private browsing is unsupported\";\n    else\n      errorMessage = error.message;\n  }\n\n  if (resp) {\n    model.trigger(\"sync\", model, resp, options);\n    if (options && options.success)\n      options.success(resp);\n    if (syncDfd)\n      syncDfd.resolve(resp);\n\n  } else {\n    errorMessage = errorMessage ? errorMessage\n                                : \"Record Not Found\";\n\n    if (options && options.error)\n      options.error(errorMessage);\n    if (syncDfd)\n      syncDfd.reject(errorMessage);\n  }\n\n  // add compatibility with $.ajax\n  // always execute callback for success and error\n  if (options && options.complete) options.complete(resp);\n\n  return syncDfd && syncDfd.promise();\n};\n\nBackbone.ajaxSync = Backbone.sync;\n\nBackbone.getSyncMethod = function(model) {\n  if(model.localStorage || (model.collection && model.collection.localStorage)) {\n    return Backbone.localSync;\n  }\n\n  return Backbone.ajaxSync;\n};\n\n// Override 'Backbone.sync' to default to localSync,\n// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'\nBackbone.sync = function(method, model, options) {\n  return Backbone.getSyncMethod(model).apply(this, [method, model, options]);\n};\n\nreturn Backbone.LocalStorage;\n}));\n"]}